
#= none:5 =#
#= none:5 =# Core.@doc "    div·∂ú·∂ú·∂ú(i, j, k, grid, u, v, w)\n\nCalculate the divergence ``ùõÅ¬∑ùêï`` of a vector field ``ùêï = (u, v, w)``,\n\n```julia\n1/V * [Œ¥x·∂ú·µÉ·µÉ(Ax * u) + Œ¥x·µÉ·∂ú·µÉ(Ay * v) + Œ¥z·µÉ·µÉ·∂ú(Az * w)]\n```\n\nwhich ends up at the cell centers `ccc`.\n" #= none:16 =# @inline(div·∂ú·∂ú·∂ú(i, j, k, grid, u, v, w) = begin
                #= none:16 =#
                (1 / V·∂ú·∂ú·∂ú(i, j, k, grid)) * (Œ¥x·∂ú·∂ú·∂ú(i, j, k, grid, Ax_q·∂†·∂ú·∂ú, u) + Œ¥y·∂ú·∂ú·∂ú(i, j, k, grid, Ay_q·∂ú·∂†·∂ú, v) + Œ¥z·∂ú·∂ú·∂ú(i, j, k, grid, Az_q·∂ú·∂ú·∂†, w))
            end)
#= none:21 =#
#= none:21 =# Core.@doc "    div_xy·∂ú·∂ú·µÉ(i, j, k, grid, u, v)\n\nReturn the discrete `div_xy = ‚àÇx u + ‚àÇy v` of velocity field `u, v` defined as\n\n```julia\n1 / Az·∂ú·∂ú·µÉ * [Œ¥x·∂ú·µÉ·µÉ(Œîy·µÉ·∂ú·µÉ * u) + Œ¥y·µÉ·∂ú·µÉ(Œîx·∂ú·µÉ·µÉ * v)]\n```\n\nat `i, j, k`, where `Az·∂ú·∂ú·µÉ` is the area of the cell centered on (Center, Center, Any) --- a tracer cell,\n`Œîy` is the length of the cell centered on (Face, Center, Any) in `y` (a `u` cell),\nand `Œîx` is the length of the cell centered on (Center, Face, Any) in `x` (a `v` cell).\n`div_xy·∂ú·∂ú·µÉ` ends up at the location `cca`.\n" #= none:35 =# @inline(flux_div_xy·∂ú·∂ú·∂ú(i, j, k, grid, u, v) = begin
                #= none:35 =#
                Œ¥x·∂ú·∂ú·∂ú(i, j, k, grid, Ax_q·∂†·∂ú·∂ú, u) + Œ¥y·∂ú·∂ú·∂ú(i, j, k, grid, Ay_q·∂ú·∂†·∂ú, v)
            end)
#= none:38 =#
#= none:38 =# @inline div_xy·∂ú·∂ú·∂ú(i, j, k, grid, u, v) = begin
            #= none:38 =#
            (1 / V·∂ú·∂ú·∂ú(i, j, k, grid)) * flux_div_xy·∂ú·∂ú·∂ú(i, j, k, grid, u, v)
        end
#= none:41 =#
#= none:41 =# @inline div_xy·∂ú·∂ú·∂†(i, j, k, grid, Qu, Qv) = begin
            #= none:41 =#
            (1 / V·∂ú·∂ú·∂†(i, j, k, grid)) * (Œ¥x·∂ú·∂ú·∂†(i, j, k, grid, Ay_q·∂†·∂ú·∂†, Qu) + Œ¥y·∂ú·∂ú·∂†(i, j, k, grid, Ax_q·∂ú·∂†·∂†, Qv))
        end
#= none:46 =#
index_left(i, ::Center) = begin
        #= none:46 =#
        i
    end
#= none:47 =#
index_left(i, ::Face) = begin
        #= none:47 =#
        i - 1
    end
#= none:48 =#
index_right(i, ::Center) = begin
        #= none:48 =#
        i + 1
    end
#= none:49 =#
index_right(i, ::Face) = begin
        #= none:49 =#
        i
    end
#= none:51 =#
#= none:51 =# @inline Base.div(i, j, k, grid::AbstractGrid, loc, q_west, q_east, q_south, q_north, q_bottom, q_top) = begin
            #= none:51 =#
            (1 / volume(i, j, k, grid, loc...)) * (Œ¥x_Ax_q(i, j, k, grid, loc, q_west, q_east) + Œ¥y_Ay_q(i, j, k, grid, loc, q_south, q_north) + Œ¥z_Az_q(i, j, k, grid, loc, q_bottom, q_top))
        end
#= none:56 =#
#= none:56 =# @inline function Œ¥x_Ax_q(i, j, k, grid, (LX, LY, LZ), q·µÇ, q·¥±)
        #= none:56 =#
        #= none:57 =#
        i·µÇ = index_left(i, LX)
        #= none:58 =#
        Ax·µÇ = Ax(i·µÇ, j, k, grid, LX, LY, LZ)
        #= none:60 =#
        i·¥± = index_right(i, LX)
        #= none:61 =#
        Ax·¥± = Ax(i·¥±, j, k, grid, LX, LY, LZ)
        #= none:63 =#
        return Ax·¥± * q·¥± - Ax·µÇ * q·µÇ
    end
#= none:66 =#
#= none:66 =# @inline function Œ¥y_Ay_q(i, j, k, grid, (LX, LY, LZ), qÀ¢, q·¥∫)
        #= none:66 =#
        #= none:67 =#
        jÀ¢ = index_left(j, LY)
        #= none:68 =#
        AyÀ¢ = Ay(i, jÀ¢, k, grid, LX, LY, LZ)
        #= none:70 =#
        j·¥∫ = index_right(j, LY)
        #= none:71 =#
        Ay·¥∫ = Ay(i, j·¥∫, k, grid, LX, LY, LZ)
        #= none:73 =#
        return Ay·¥∫ * q·¥∫ - AyÀ¢ * qÀ¢
    end
#= none:76 =#
#= none:76 =# @inline function Œ¥z_Az_q(i, j, k, grid, (LX, LY, LZ), q·¥Æ, q·µÄ)
        #= none:76 =#
        #= none:77 =#
        k·¥Æ = index_left(k, LZ)
        #= none:78 =#
        Az·¥Æ = Az(i, j, k·¥Æ, grid, LX, LY, LZ)
        #= none:80 =#
        k·µÄ = index_right(k, LZ)
        #= none:81 =#
        Az·µÄ = Az(i, j, k·µÄ, grid, LX, LY, LZ)
        #= none:83 =#
        return Az·µÄ * q·µÄ - Az·¥Æ * q·¥Æ
    end
#= none:88 =#
#= none:88 =# @inline Œ¥x_Ax_q(i, j, k, grid::XFlatGrid, args...) = begin
            #= none:88 =#
            zero(grid)
        end
#= none:89 =#
#= none:89 =# @inline Œ¥y_Ay_q(i, j, k, grid::YFlatGrid, args...) = begin
            #= none:89 =#
            zero(grid)
        end
#= none:90 =#
#= none:90 =# @inline Œ¥z_Az_q(i, j, k, grid::ZFlatGrid, args...) = begin
            #= none:90 =#
            zero(grid)
        end